{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","myExp","setMyExp","highestExp","setHighestExp","myLevel","setMyLevel","highestLevel","setHighestLevel","givenExp","setGivenExp","isActive","setActive","set","setter","event","val","parseInt","target","value","calculate","useCallback","modifier","m","h","useEffect","setTimeout","className","htmlFor","type","id","onChange","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAoGeA,MAjGf,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACNC,EADM,KACCC,EADD,OAEuBF,mBAAS,GAFhC,mBAENG,EAFM,KAEMC,EAFN,OAGiBJ,mBAAS,GAH1B,mBAGNK,EAHM,KAGGC,EAHH,OAI2BN,mBAAS,GAJpC,mBAINO,EAJM,KAIQC,EAJR,OAKmBR,mBAAS,GAL5B,mBAKNS,EALM,KAKIC,EALJ,OAMiBV,oBAAS,GAN1B,mBAMNW,EANM,KAMIC,EANJ,KAQPC,EAAM,SAACC,GAAD,OAAY,SAACC,GACvB,IAAMC,EAAMC,SAASF,EAAMG,OAAOC,OAElCL,EAAOE,KAOHI,EAAYC,uBAAY,WAC5B,IAAMC,EAAWf,EAAeF,EAAU,EAC1CH,GAAS,SAACqB,GAAD,OAAOA,EAAID,KACpBlB,GAAc,SAACoB,GAAD,OAAOA,EAAI,KACzBd,EAAYD,EAAW,KAEtB,CAACA,IA0BJ,OAxBAgB,qBAAU,WACJtB,GAAc,IAAOQ,IACvBH,GAAgB,SAACgB,GAAD,OAAOA,EAAI,KAC3BpB,EAAcD,EAAa,QAE5B,CAACA,EAAYQ,IAEhBc,qBAAU,WACJxB,GAAS,KAAQU,IACnBL,GAAW,SAACiB,GAAD,OAAOA,EAAI,KACtBrB,EAASD,EAAQ,QAElB,CAACA,EAAOU,IAEXc,qBAAU,WACS,IAAbhB,EAIAE,GACFe,YAAW,kBAAMN,MAAa,GAJ9BR,GAAU,KAMX,CAACD,EAAUF,EAAUW,IAGtB,qBAAKO,UAAU,YAAf,SACE,sBAAKA,UAAU,OAAf,UACE,sBAAKA,UAAU,kBAAf,UACE,sBAAKA,UAAU,MAAf,UACE,uBAAOC,QAAQ,QAAf,4BAGA,uBAAOC,KAAK,SAASC,GAAG,QAAQH,UAAU,QAAQR,MAAOlB,EAAO8B,SAAUlB,EAAIX,QAEhF,sBAAKyB,UAAU,MAAf,UACE,uBAAOC,QAAQ,UAAf,uBAGA,uBAAOC,KAAK,SAASC,GAAG,UAAUH,UAAU,QAAQR,MAAOd,EAAS0B,SAAUlB,EAAIP,WAGtF,sBAAKqB,UAAU,kBAAf,UACE,sBAAKA,UAAU,MAAf,UACE,uBAAOC,QAAQ,aAAf,iCAGA,uBAAOC,KAAK,SAASC,GAAG,aAAaH,UAAU,QAAQR,MAAOhB,EAAY4B,SAAUlB,EAAIT,QAE1F,sBAAKuB,UAAU,MAAf,UACE,uBAAOC,QAAQ,aAAf,4BAGA,uBAAOC,KAAK,SAASC,GAAG,eAAeH,UAAU,QAAQR,MAAOZ,EAAcwB,SAAUlB,EAAIL,WAGhG,sBAAKmB,UAAU,wCAAf,UACE,sBAAKA,UAAU,MAAf,UACE,uBAAOC,QAAQ,WAAf,+BAGA,uBAAOC,KAAK,SAASC,GAAG,WAAWH,UAAU,QAAQR,MAAOV,EAAUsB,SAAUlB,EAAIH,QAEtF,qBAAKiB,UAAU,MAAf,SACE,wBAAQK,QA3EF,WACdpB,GAAWD,IA0EH,SAA2BA,EAAW,OAAS,qBChF5CsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.d1599cbb.chunk.js","sourcesContent":["import './App.css';\nimport {useCallback, useEffect, useState} from 'react'\n\nfunction App() {\n  const [myExp, setMyExp] = useState(0)\n  const [highestExp, setHighestExp] = useState(0)\n  const [myLevel, setMyLevel] = useState(0)\n  const [highestLevel, setHighestLevel] = useState(0)\n  const [givenExp, setGivenExp] = useState(0)\n  const [isActive, setActive] = useState(false)\n\n  const set = (setter) => (event) => {\n    const val = parseInt(event.target.value);\n\n    setter(val)\n  }\n\n  const onClick = () => {\n    setActive(!isActive)\n  }\n\n  const calculate = useCallback(() => {\n    const modifier = highestLevel - myLevel + 1;\n    setMyExp((m) => m + modifier)\n    setHighestExp((h) => h + 1)\n    setGivenExp(givenExp - 1)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [givenExp])\n\n  useEffect(() => {\n    if (highestExp >= 1000 & isActive) {\n      setHighestLevel((h) => h + 1)\n      setHighestExp(highestExp - 1000)\n    }\n  }, [highestExp, isActive])\n\n  useEffect(() => {\n    if (myExp >= 1000 && isActive) {\n      setMyLevel((m) => m + 1)\n      setMyExp(myExp - 1000)\n    }\n  }, [myExp, isActive])\n\n  useEffect(() => {\n    if (givenExp === 0) {\n      setActive(false);\n      return;\n    }\n    if (isActive) {\n      setTimeout(() => calculate(), 5)\n    }\n  }, [isActive, givenExp, calculate])\n\n  return (\n    <div className=\"container\">\n      <div className=\"card\">\n        <div className=\"inner-container\">\n          <div className=\"row\">\n            <label htmlFor=\"myExp\">\n              My experience:\n            </label>\n            <input type=\"number\" id=\"myExp\" className=\"small\" value={myExp} onChange={set(setMyExp)} />\n          </div>\n          <div className=\"row\">\n            <label htmlFor=\"myLevel\">\n              My level:\n            </label>\n            <input type=\"number\" id=\"myLevel\" className=\"small\" value={myLevel} onChange={set(setMyLevel)} />\n          </div>\n        </div>\n        <div className=\"inner-container\">\n          <div className=\"row\">\n            <label htmlFor=\"highestExp\">\n              Highest experience:\n            </label>\n            <input type=\"number\" id=\"highestExp\" className=\"small\" value={highestExp} onChange={set(setHighestExp)} />\n          </div>\n          <div className=\"row\">\n            <label htmlFor=\"highestLvl\">\n              Highest level:\n            </label>\n            <input type=\"number\" id=\"highestLevel\" className=\"small\" value={highestLevel} onChange={set(setHighestLevel)} />\n          </div>\n        </div>\n        <div className=\"inner-container inner-container--wide\">\n          <div className=\"row\">\n            <label htmlFor=\"givenExp\">\n              Given experience:\n            </label>\n            <input type=\"number\" id=\"givenExp\" className=\"small\" value={givenExp} onChange={set(setGivenExp)} />\n          </div>\n          <div className=\"row\">\n            <button onClick={onClick}>{isActive ? 'Stop' : 'Start'}</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}